name: Deploy to Amazon S3

on:
  push:
    branches: ["main", "release/*"]
  pull_request:
    branches: ["main", "release/*"]
  workflow_dispatch:

env:
  AWS_S3_BUCKET_DEV: newput-react-web-dev
  AWS_S3_BUCKET_PROD: newput-react-web-prod

permissions:
  contents: read

jobs:
  DEVBuild:
    name: DEV Build
    runs-on: ubuntu-latest
    environment:
      name: Development

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.9

      - name: Terraform fmt
        id: fmt
        working-directory: infra/
        run: terraform fmt -recursive -check -diff
        continue-on-error: false

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 14
          cache: 'npm'

      - name: Install Node Module
        run: npm ci
        # run: npm install && npm run build

      - name: Build React App
        run: npm run build:development

      - name: Upload Development Build Files
        uses: actions/upload-artifact@v3
        with:
          name: development-artifact
          path: ./build
          retention-days: 2

      # - name: Terraform Init
      #   id: init
      #   working-directory: infra/
      #   run: terraform init -backend-config=vars/dev_backend.tfvars -backend-config=region=${{ secrets.AWS_REGION }} -backend-config=access_key=${{ secrets.AWS_ACCESS_KEY_ID }} -backend-config=secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # - name: Terraform Validate
      #   id: validate
      #   working-directory: infra/
      #   run: terraform validate -no-color

      # - name: Terraform Plan
      #   id: plan
      #   working-directory: infra/
      #   run: terraform plan -var-file=vars/dev.tfvars -var=access_key=${{ secrets.AWS_ACCESS_KEY_ID }} -var=secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }} -out tfplan

      # - name: Terraform Apply
      #   id: apply
      #   working-directory: infra/
      #   run: terraform apply -auto-approve tfplan

      # - name: Configure AWS Credentials
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: ${{ secrets.AWS_REGION }}

      # - name: Deploy app build to S3 bucket
      #   run: aws s3 sync ./build/ s3://${{ env.AWS_S3_BUCKET_DEV }} --delete

  DeployDEV:
    name: Deploy on DEV
    needs: [DEVBuild]
    runs-on: ubuntu-latest
    environment:
      name: Development
    # defaults:
    #   run:
    #     working-directory: infra/

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.9

      - name: Terraform Init
        id: init
        working-directory: infra/
        run: terraform init -backend-config=vars/dev_backend.tfvars -backend-config=region=${{ secrets.AWS_REGION }} -backend-config=access_key=${{ secrets.AWS_ACCESS_KEY_ID }} -backend-config=secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Validate
        id: validate
        working-directory: infra/
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        working-directory: infra/
        run: terraform plan -var-file=vars/dev.tfvars -var=access_key=${{ secrets.AWS_ACCESS_KEY_ID }} -var=secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }} -out tfplan

      - name: Terraform Apply
        id: apply
        working-directory: infra/
        run: terraform apply -auto-approve tfplan

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: development-artifact
          path: ./build

      - name: Check path name
        working-directory: build
        run: |
          $pwd

      - name: Deploy app build to S3 bucket
        run: aws s3 sync ./build/ s3://${{ env.AWS_S3_BUCKET_DEV }} --delete

  DestroyDEV:
    name: Destroy on DEV
    needs: [DeployDEV]
    runs-on: ubuntu-latest
    environment:
      name: Dev-Approver
    defaults:
      run:
        working-directory: infra/

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.9

      - name: Terraform Init
        id: init
        run: terraform init -backend-config=vars/dev_backend.tfvars -backend-config=region=${{ secrets.AWS_REGION }} -backend-config=access_key=${{ secrets.AWS_ACCESS_KEY_ID }} -backend-config=secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Destroy
        id: destroy
        run: terraform destroy -auto-approve -var-file=vars/dev.tfvars -var=access_key=${{ secrets.AWS_ACCESS_KEY_ID }} -var=secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}

  PRODBuild:
    name: PROD Build
    runs-on: ubuntu-latest
    environment:
      name: Production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.9

      - name: Terraform fmt
        id: fmt
        working-directory: infra/
        run: terraform fmt -recursive -check -diff
        continue-on-error: false

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 14
          cache: 'npm'

      - name: Install Node Module
        run: npm ci

      - name: Build React App
        run: npm run build:production

  DeployPROD:
    name: Deploy on PROD
    needs: [PRODBuild]
    runs-on: ubuntu-latest
    environment:
      name: Production
    defaults:
      run:
        working-directory: infra/

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.9

      - name: Terraform Init
        id: init
        run: terraform init -backend-config=vars/prod_backend.tfvars -backend-config=region=${{ secrets.AWS_REGION }} -backend-config=access_key=${{ secrets.AWS_ACCESS_KEY_ID }} -backend-config=secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -var-file=vars/prod.tfvars -var=access_key=${{ secrets.AWS_ACCESS_KEY_ID }} -var=secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }} -out tfplan

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve tfplan

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy app build to S3 bucket
        working-directory: ./../
        run: aws s3 sync ./build/ s3://${{ env.AWS_S3_BUCKET_PROD }} --delete

  DestroyPROD:
    name: Destroy on PROD
    needs: [DeployPROD]
    runs-on: ubuntu-latest
    environment:
      name: Production
    defaults:
      run:
        working-directory: infra/

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.9

      - name: Terraform Init
        id: init
        run: terraform init -backend-config=vars/prod_backend.tfvars -backend-config=region=${{ secrets.AWS_REGION }} -backend-config=access_key=${{ secrets.AWS_ACCESS_KEY_ID }} -backend-config=secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Destroy
        id: destroy
        run: terraform destroy -auto-approve -var-file=vars/prod.tfvars -var=access_key=${{ secrets.AWS_ACCESS_KEY_ID }} -var=secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}
